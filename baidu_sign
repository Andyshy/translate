
    function e(r) {    //传入的r是翻译的内容
        var o = r.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g);  //正则匹配utf-16字符（查找到的结果作为数组返回，即python中的list）
        if (null === o) {  //如果正则没找到返回null
            var t = r.length; //把翻译的内容的长度赋值给t
            t > 30 && (r = "" + r.substr(0, 10) + r.substr(Math.floor(t / 2) - 5, 10) + r.substr( - 10, 10)) //stringObject.substr(start,length)从字符串指定下标抽取一定长度的字符串
            //翻译的内容长度大于30和r = r前十个字符和
        } else {
            for (var e = r.split(/[\uD800-\uDBFF][\uDC00-\uDFFF]/), C = 0, h = e.length, f = []; h > C; C++)"" !== e[C] && f.push.apply(f, a(e[C].split(""))),
            C !== h - 1 && f.push(o[C]);
            var g = f.length;
            g > 30 && (r = f.slice(0, 10).join("") + f.slice(Math.floor(g / 2) - 5, Math.floor(g / 2) + 5).join("") + f.slice( - 10).join(""))
        }
        var u = void 0,  //u赋值为undefined
        l = "" + String.fromCharCode(103) + String.fromCharCode(116) + String.fromCharCode(107);  //String.fromCharCode()函数用于从一些Unicode字符值中返回一个字符串，l值为gtk
        u = null !== i ? i: (i = window[l] || "") || "";  //u等于gtk

        for (var d = u.split("."), m = Number(d[0]) || 0, s = Number(d[1]) || 0, S = [], c = 0, v = 0; v < r.length; v++)
        //d是gtk以“.”分割后的数组,m等于gtk第一部分或0，s等于gtk第二部分或0，S值为空数组，v值为0，c值为0，循环时当v小于翻译内容的长度，v自加1
        {
            var A = r.charCodeAt(v);
            128 > A ? S[c++] = A: (2048 > A ? S[c++] = A >> 6 | 192 : (55296 === (64512 & A) && v + 1 < r.length && 56320 === (64512 & r.charCodeAt(v + 1)) ? (A = 65536 + ((1023 & A) << 10) + (1023 & r.charCodeAt(++v)), S[c++] = A >> 18 | 240, S[c++] = A >> 12 & 63 | 128) : S[c++] = A >> 12 | 224, S[c++] = A >> 6 & 63 | 128), S[c++] = 63 & A | 128)
        }
        for (var p = m,
        F = "" + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(97) + ("" + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(54)), D = "" + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(51) + ("" + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(98)) + ("" + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(102)), b = 0; b < S.length; b++) p += S[b],
        p = n(p, F);
        //p值为gtk第一部分，F值为+-a^+6,D值为+-3^+b+-f,b值为0，当b小于翻译内容的长度时，b自加1
        //每次循环，p等于p加上S数组下标b处的值
        //p值为传入n函数的p值，F值得返回值
        return p = n(p, D),p ^= s,0 > p && (p = (2147483647 & p) + 2147483648),p %= 1e6,p.toString() + "." + (p ^ m)
    }

        function n(r, o) {
        for (var t = 0; t < o.length - 2; t += 3) {
            var a = o.charAt(t + 2);
            a = a >= "a" ? a.charCodeAt(0) - 87 : Number(a),
            a = "+" === o.charAt(t + 1) ? r >>> a: r << a,
            r = "+" === o.charAt(t) ? r + a & 4294967295 : r ^ a
        }
        return r